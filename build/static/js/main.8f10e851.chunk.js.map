{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","style","textAlign","width","height","backgroundImage","Button","position","top","textDecoration","color","fontSize","to","App","props","NextQuestion","state","disable","setState","questionNumber","gameNext","finalscore","seconds","uri","difficulty","axios","get","then","res","questions","data","results","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","interval","setInterval","tick","changeToDifficulty","e","target","value","selectedDif","gameStarted","timefrize","timeStart","console","log","handleClick","bind","justClicked","score","wrong","questionUpdate","timeisUp","this","pS","anwscorrec","clearInterval","alert","path","render","onClick","marginLeft","exact","component","Table","striped","bordered","hover","Badge","background","border","marginTop","left","src","float","variant","className","map","ans","key","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f10e851.chunk.js","sourcesContent":["import React from 'react'\nimport {Button} from 'react-bootstrap'\nimport {BrowserRouter as Route, Link} from 'react-router-dom'\n function Home() {\n   \n    return(\n        <div style={{textAlign:'center',width:'100%',height:'800px', backgroundImage:'url(\"https://pbs.twimg.com/media/EPRpzXGWkAER5Ne?format=jpg&name=large\")'}} >\n           \n            <Button style={{position:'relative',top:'700px'}}><Link style={{textDecoration:'none',color:'white',fontSize:'25px'}} to=\"/difficulty\" >Start Game</Link></Button>\n            \n          </div>\n    )\n   }\nexport default Home","/* eslint-disable jsx-a11y/alt-text */\nimport React, { Component } from 'react'\nimport {Button,Badge,Table} from 'react-bootstrap'\nimport axios from 'axios';\nimport {BrowserRouter as Router, Link} from 'react-router-dom'\nimport {  Route ,Redirect} from 'react-router-dom';\nimport Home from './components/Home'\n\n\nclass  App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.changeToDifficulty = this.changeToDifficulty.bind(this);\n    \n    this.state = {\n      correctAnswer:[],\n      questionNumber:0,\n      questions:[],\n      gameNext:0,\n      justClicked:[],\n      score:0,\n      finalscore:0,\n      wrong:0,\n      disable:false,\n      gameStarted:false,\n      incorrectAnswers:[],\n      difficulty:'medium',\n      questionUpdate:false,\n      selectedDif:false,\n      timeStart: false,\n      timefrize:true,\n      timeisUp:false,\n      seconds: 16,\n\n    };\n\n  }\n  //https://opentdb.com/api.php?amount=10&category=14&difficulty=medium&type=multiple\n  //https://opentdb.com/api.php?amount=10\n          \n     componentDidMount(){\n      const uri =` https://opentdb.com/api.php?amount=10&category=18&difficulty=${this.state.difficulty}&type=multiple`;\n      axios.get(uri)\n      .then(res => {\n          //const quesions = res.data.results[this.state.questionNumber]\n          this.setState({\n            questions : res.data.results[this.state.questionNumber].question,\n            correctAnswer : res.data.results[this.state.questionNumber].correct_answer,\n            incorrectAnswers :res.data.results[this.state.questionNumber].incorrect_answers,\n            questionUpdate: true,\n          })\n        });\n        \n       console.log(this.state.incorrectAnswers)\n  \n     \n      }\n  \n    handleClick(e,pS) {\n      this.setState({\n        justClicked: e.target.value,\n        gameStarted: true        \n      });  \n     \n    }\n    tick() {\n      this.setState(state => ({\n        seconds: state.seconds - 1\n        \n      }));\n    }\n\n    \n \n    componentDidUpdate(){\n      console.log(this.state.questionNumber)\n      console.log(this.state.gameNext)\n   \n   \n      \n       \n       // When select a true \n      if(this.state.gameStarted){\n      if(this.state.correctAnswer === this.state.justClicked){\n        \n        this.setState({\n          gameStarted : false,\n          anwscorrec:true,\n          disable:true,\n          score: this.state.score + 1,\n          questionNumber : this.state.questionNumber +1\n\n        })\n        clearInterval(this.interval);\n        \n\n      }\n      // When select a false\n      else{\n        alert('Score : ' + this.state.finalscore)\n        \n        this.setState({\n          gameStarted : false,\n          disable:true,\n          gameNext:0,\n          wrong: this.state.wrong + 1,\n          finalscore:0,\n\n          questionNumber:0,\n          score:0,\n          seconds:16,\n          timeisUp:false,\n          \n        \n        })\n        \n     \n        \n        // this.state.seconds===0 ? console.log('time up ') : alert( 'Score  : ' + this.state.score * this.state.seconds + '    Maximum : 100')\n        // alert('Correct Answer :' +this.state.correctAnswer )\n        // alert('New Game Started')\n      }\n    }\n\n      if(this.state.seconds === 0){\n        this.setState({\n          timeisUp: true,\n        })\n      }\n      \n\n      //When your answer is wrong or time is up\n    if(this.state.wrong ===1 || this.state.gameNext ===9 || this.state.timeisUp || this.state.questionNumber===10){\n      alert('Score : ' + this.state.finalscore)\n      this.setState({\n        questionNumber:0,\n        gameNext:0,\n        score:0,\n        wrong:0,\n        disable:false,\n        seconds:16,\n        timeisUp:false,\n        finalscore:0,\n\n\n      })\n      \n\n      const uri =` https://opentdb.com/api.php?amount=10&category=18&difficulty=${this.state.difficulty}&type=multiple`;\n      axios.get(uri)\n      // .then(res => {\n      //   console.log(res.data.results[this.state.questionNumber]);\n      // })\n      .then(res => {\n          //const quesions = res.data.results[this.state.questionNumber]\n          this.setState({\n            questions : res.data.results[this.state.questionNumber].question,\n            correctAnswer : res.data.results[this.state.questionNumber].correct_answer,\n            incorrectAnswers :res.data.results[this.state.questionNumber].incorrect_answers\n          })\n        });\n        this.state.timeisUp ? alert('Time is Up','Game is started')  : console.log('alert')\n      \n    }\n   \n    \n  }  \n    \n    NextQuestion=()=>{\n          \n      if(this.state.disable){\n      this.setState({\n        questionNumber: this.state.questionNumber + this.state.gameNext,\n        disable:false,\n        finalscore: this.state.finalscore + this.state.seconds,\n        seconds:16,\n        \n\n\n      })\n      const uri =` https://opentdb.com/api.php?amount=10&category=18&difficulty=${this.state.difficulty}&type=multiple`;\n      axios.get(uri)\n      // .then(res => {\n      //   console.log(res.data.results[this.state.questionNumber]);\n      // })\n      .then(res => {\n          //const quesions = res.data.results[this.state.questionNumber]\n          this.setState({\n            questions : res.data.results[this.state.questionNumber].question,\n            correctAnswer : res.data.results[this.state.questionNumber].correct_answer,\n            incorrectAnswers :res.data.results[this.state.questionNumber].incorrect_answers\n          })\n        });\n        this.interval = setInterval(() => this.tick(), 1000);\n      }\n     \n        \n    }\n    changeToDifficulty=(e)=>{\n      this.setState({\n        difficulty: e.target.value,\n        selectedDif:true,\n        gameStarted:false,\n        timefrize:false,\n        timeStart:true,\n        seconds:16,\n      });  \n\n      this.interval = setInterval(() => this.tick(), 1000);\n      console.log(this.state.difficulty)\n    }\n\n    \n   \n\n\n render() {\n  return(\n    <Router>\n    \n    <Route path=\"/difficulty\" render={()=>{\n      return(\n        <div style={{textAlign:'center',position:'relative',top:'300px'}}>\n        <h2>Pick A Difficulty</h2>\n          <Button style={{width:'300px'}} onClick={this.changeToDifficulty} value=\"easy\" >Easy</Button><p></p>\n          <Button style={{width:'300px'}} onClick={this.changeToDifficulty} value=\"medium\">Medium</Button><p></p>\n          <Button style={{width:'300px'}} onClick={this.changeToDifficulty} value=\"hard\">Hard</Button><p></p>\n          <span><Link to=\"/\">Home</Link></span>\n          <span style={{marginLeft:'10px'}}><Link to=\"/game\">Go to Game</Link></span>\n        </div>\n      )\n    }} />\n    <Route exact path=\"/\"  component={Home} >\n    <Home/>\n    </Route>\n\n        <Route path=\"/game\"  render={\n          ()=>{\n            return( \n               <div  style={{textAlign:'center'}}>\n      \n      <Table striped bordered hover>\n  <tbody>\n    <tr>\n      <th><h5><Badge>Score</Badge></h5></th>\n      <th><h5><Badge>{this.state.finalscore}</Badge></h5></th>\n    </tr>\n  </tbody>\n</Table>\n<Link style={{}} to=\"/difficulty\">Back to Section</Link><p></p>\n  <div style={{background:'white',border:'1px solid #ec7373',width:'500px',height:'630px',textAlign:'center',marginTop:'30px',position:'relative',left:'470px'}}>\n  \n  <img style={{width:'200px',height:'130px'}} src=\"./quiz.png\"/>\n  \n    {/* {<h2 style={{textAlign:'center',marginTop:'25px'}}>Trivia-Game</h2>} */}\n    \n    <hr></hr>\n    <h6 style={{float:'left'}}>\n   Difficulty : <Badge variant=\"secondary\">{this.state.difficulty}</Badge>\n </h6>\n <h6 style={{float:'right'}}>\n   Time : <Badge variant=\"danger\">{this.state.seconds}</Badge>\n </h6>\n    \n <h4 style={{textAlign:'center',marginTop:'85px'}}>{this.state.questions}</h4>\n \n  <div style={{marginTop:'125px'}}>\n        <Button  style={{float:'right'}}  className=\"btn btn-primary\" onClick={this.NextQuestion}>Next Quesion</Button>\n\n        <h3 style={{float:'left'}}>\n   Score : <Badge variant=\"secondary\">{this.state.score}/10</Badge>\n </h3>\n\n\n <hr></hr>\n\n </div>\n   <div style={{marginTop:'60px'}}>\n {\n   this.state.incorrectAnswers.map(ans=>{\n      return(\n        <div style={{textAlign:'center',marginTop:'2px'}}  key={ans}>\n        <Button  className=\"btn btn-primary btn-sm\"  disabled={this.state.disable} onClick={this.handleClick} value={ans} style={{width:'100%'}}>{ans}</Button><br></br>\n        </div> )})\n }\n <Button  className=\"btn btn-primary btn-sm\"  style={{width:'100%',marginTop:'2px'}} disabled={this.state.disable} onClick={this.handleClick} value={this.state.correctAnswer} >{this.state.correctAnswer}</Button>\n </div>\n        \n\n\n  </div>\n\n  </div>)\n          }\n        }  />\n      \n   </Router>\n    )\n    \n   }\n }\n \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}