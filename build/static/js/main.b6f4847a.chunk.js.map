{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","style","textAlign","width","height","backgroundImage","Button","position","top","textDecoration","color","fontSize","to","App","props","NextQuestion","state","disable","setState","questionNumber","gameNext","axios","get","then","res","questions","data","results","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","goback","handleClick","bind","justClicked","score","wrong","gameStarted","e","pS","this","target","value","alert","console","log","exact","path","component","render","background","border","marginTop","left","src","float","className","onClick","Badge","variant","map","ans","key","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6f4847a.chunk.js","sourcesContent":["import React from 'react'\nimport {Button} from 'react-bootstrap'\nimport {BrowserRouter as Route, Link} from 'react-router-dom'\n function Home() {\n   \n    return(\n        <div style={{textAlign:'center',width:'100%',height:'800px', backgroundImage:'url(\"https://pbs.twimg.com/media/EPRpzXGWkAER5Ne?format=jpg&name=large\")'}} >\n           \n            <Button style={{position:'relative',top:'700px'}}><Link style={{textDecoration:'none',color:'white',fontSize:'25px'}} to=\"/game\" >Start Game</Link></Button>\n            \n          </div>\n    )\n   }\nexport default Home","/* eslint-disable jsx-a11y/alt-text */\nimport React, { Component } from 'react'\nimport {Button,Badge} from 'react-bootstrap'\nimport axios from 'axios';\nimport {BrowserRouter as Router, Link} from 'react-router-dom'\nimport {  Route ,Redirect} from 'react-router-dom';\nimport Home from './components/Home'\n\nclass  App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      correctAnswer:[],\n      questionNumber:0,\n      questions:[],\n      gameNext:0,\n      justClicked:[],\n      score:0,\n      wrong:0,\n      disable:false,\n      gameStarted:false,\n      incorrectAnswers:[],\n\n    };\n\n  }\n  //https://opentdb.com/api.php?amount=10&category=14&difficulty=medium&type=multiple\n  //https://opentdb.com/api.php?amount=10\n          \n     componentDidMount(){\n      const uri =` https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple`;\n      axios.get(uri)\n      .then(res => {\n          //const quesions = res.data.results[this.state.questionNumber]\n          this.setState({\n            questions : res.data.results[this.state.questionNumber].question,\n            correctAnswer : res.data.results[this.state.questionNumber].correct_answer,\n            incorrectAnswers :res.data.results[this.state.questionNumber].incorrect_answers\n          })\n        });\n       \n     }\n  \n    handleClick(e,pS) {\n      this.setState({\n        justClicked: e.target.value,\n        gameStarted: true        \n      });  \n     \n    }\n \n    componentDidUpdate(){\n\n     \n      \n   \n     \n      if(this.state.gameStarted){\n      if(this.state.correctAnswer === this.state.justClicked){\n        \n\n        this.setState({\n          gameStarted : false,\n          disable:true,\n          score: this.state.score + 1,\n          questionNumber : this.state.questionNumber +1\n\n        })\n        \n        \n      }else{\n        \n        this.setState({\n          gameStarted : false,\n          disable:true,\n          gameNext:0,\n          wrong: this.state.wrong + 1,\n          \n        })\n      }\n    }\n\n    \n    if(this.state.wrong ===1 || this.state.score + this.state.wrong ===9){\n      this.setState({\n        questionNumber:0,\n        gameNext:0,\n        score:0,\n        wrong:0,\n        disable:false,\n\n      })\n\n      const uri =` https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple`;\n      axios.get(uri)\n      // .then(res => {\n      //   console.log(res.data.results[this.state.questionNumber]);\n      // })\n      .then(res => {\n          //const quesions = res.data.results[this.state.questionNumber]\n          this.setState({\n            questions : res.data.results[this.state.questionNumber].question,\n            correctAnswer : res.data.results[this.state.questionNumber].correct_answer,\n            incorrectAnswers :res.data.results[this.state.questionNumber].incorrect_answers\n          })\n        });\n        alert('Your score  : ' + this.state.score )\n      \n    }\n    console.log(this.state.score )\n    console.log(this.state.wrong )\n   \n    \n  }\n       \n    \n    NextQuestion=()=>{\n          \n      if(this.state.disable){\n      this.setState({\n        questionNumber: this.state.questionNumber + this.state.gameNext,\n        disable:false\n      })\n      const uri =` https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple`;\n      axios.get(uri)\n      // .then(res => {\n      //   console.log(res.data.results[this.state.questionNumber]);\n      // })\n      .then(res => {\n          //const quesions = res.data.results[this.state.questionNumber]\n          this.setState({\n            questions : res.data.results[this.state.questionNumber].question,\n            correctAnswer : res.data.results[this.state.questionNumber].correct_answer,\n            incorrectAnswers :res.data.results[this.state.questionNumber].incorrect_answers\n          })\n        });\n      }\n        \n    }\n\n    goback=()=>{\n      this.setState({\n        questionNumber:2,\n      })\n    }\n         \n\n render() {\n  return(\n    <Router>\n    \n    <Route exact path=\"/\"  component={Home} >\n    <Home/>\n\n    </Route>\n       \n\n\n        <Route path=\"/game\"  render={\n          ()=>{\n            return(  <div  style={{textAlign:'center'}}>\n      \n  <div style={{background:'white',border:'1px solid #ec7373',width:'500px',height:'540px',textAlign:'center',marginTop:'60px',position:'relative',left:'470px'}}>\n  <img style={{width:'200px',height:'130px'}} src=\"./quiz.png\"/>\n    {/* {<h2 style={{textAlign:'center',marginTop:'25px'}}>Trivia-Game</h2>} */}\n    <hr></hr>\n    \n <h4 style={{textAlign:'center',marginTop:'20px'}}>{this.state.questions}</h4>\n  <div style={{marginTop:'125px'}}>\n        <Button  style={{float:'right'}}  className=\"btn btn-primary\" onClick={this.NextQuestion}>Next Quesion</Button>\n\n        <h3 style={{float:'left'}}>\n   Score : <Badge variant=\"secondary\">{this.state.score}/10</Badge>\n </h3>\n <hr></hr>\n </div>\n   <div style={{marginTop:'60px'}}>\n {\n   this.state.incorrectAnswers.map(ans=>{\n      return(\n        <div style={{textAlign:'center',marginTop:'2px'}}  key={ans}>\n        <Button  className=\"btn btn-primary btn-sm\"  disabled={this.state.disable} onClick={this.handleClick} value={ans} style={{width:'100%'}}>{ans}</Button><br></br>\n        </div> )})\n }\n <Button  className=\"btn btn-primary btn-sm\"  style={{width:'100%',marginTop:'2px'}} disabled={this.state.disable} onClick={this.handleClick} value={this.state.correctAnswer} >{this.state.correctAnswer}</Button>\n </div>\n        \n\n\n  </div>\n  </div>)\n          }\n        }  />\n      \n   </Router>\n    )\n    \n   }\n }\n \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}